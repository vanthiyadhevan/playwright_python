def COLOR_MAP = [
    'SUCCESS' : 'good',
    'FAILURE' : 'danger',
    'UNSTABLE' : 'warning',
    'ABORTED' : 'warning'
]

pipeline {
    agent any
    environment {
        SSH_USER = 'ubuntu'
        SSH_KEY = '/home/mr-skyline/Downloads/vickey-prod-key.pem'
        NODE_LABEL = 'jenkins-slave'
        AWS_CREDENTIALS = credentials('aws_creds')
        // JENKINS_TOKEN = credentials('jenkins_api_token')
        USER_NAME = 'jenkins'
        PASS = '11ade33c6072c85ec493c76145f587e345'  // Jenkins password stored securely as a credential
        IMAGE_NAME = 'playwright_python'
    }
    stages {
        stage('Clone repository') {
            steps {
                git url: 'https://github.com/vanthiyadhevan/playwright_python.git', branch: 'jenkins_slave_node'
            }
        }
        stage('Terraform Init') {
            steps {
                sh 'terraform init'
            }
        }
        stage('Terraform Validate') {
            steps {
                sh 'terraform validate'
            }
        }
        stage('Terraform Apply') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_creds']]) {
                    sh 'terraform apply -auto-approve'
                }
            }
        }
        stage('Get EC2 Instance IP') {
            steps {
                script {
                    // Get the EC2 instance public IP
                    env.EC2_IP = sh(script: "terraform output -raw PublicIP", returnStdout: true).trim()
                    echo "EC2 Instance IP: ${env.EC2_IP}"
                }
            }
        }
        stage('Apply JCasC Configuration') {
            steps {
                script {
                    def jenkinsSlaveConfig = """
                        jenkins:
                          nodes:
                            - permanent:
                                name: "jenkins-slave"
                                nodeDescription: "AWS EC2 instance configured as a Jenkins slave node"
                                remoteFS: "/home/ubuntu/jenkins"
                                numExecutors: 1
                                launcher:
                                  sshLauncher:
                                    host: "${EC2_IP}"
                                    port: 22
                                    sshHostKeyVerificationStrategy: "nonVerifyingKeyVerificationStrategy"
                                    credentialsId: "slave_node"
                                    jvmOptions: "-Xmx1024m"
                                    javaPath: "/usr/bin/java"
                                    launchTimeoutSeconds: 60
                                    maxNumRetries: 5
                                    retryWaitTime: 15
                                labelString: "jenkins-slave"
                                retentionStrategy:
                                  always: {}
                    """
                     writeFile file: 'jenkins-slave-config.yaml', text: jenkinsSlaveConfig
                    // Fetch Crumb Token for CSRF Protection
                    def crumbData = sh(
                        script: 'curl -u jenkins:11ade33c6072c85ec493c76145f587e345 -s http://18.225.255.234:8080/crumbIssuer/api/json', returnStdout: true).trim()

                    // Parse the crumb JSON response
                    def crumbJson = readJSON text: crumbData
                    def crumbField = crumbJson.crumbRequestField
                    def crumbToken = crumbJson.crumb

                    echo "Crumb field: ${crumbField}"
                    echo "Crumb token: ${crumbToken}"

                    // Apply Jenkins Configuration using the Crumb for CSRF protection
                    sh """
                        curl -v -X POST http://18.225.255.234:8080/configuration-as-code/apply \
                        --user jenkins:11ade33c6072c85ec493c76145f587e345 \
                        -H "${crumbField}:${crumbToken}" \
                        --form jenkins-configuration=@jenkins-slave-config.yaml
                    """
                }
            }
        }
        // stage('Wait for Jenkins Slave') {
        //     steps {
        //         script {
        //             waitUntil {
        //                 nodeExists = sh(script: "curl -s http://192.168.1.10:8080/computer/jenkins-slave/api/json | jq '.offline'", returnStdout: true).trim() == "false"
        //                 return nodeExists
        //             }
        //             echo "Jenkins slave node is online!"
        //         }
        //     }
        // }
        stage('Build Docker Image') {
            agent { label NODE_LABEL }
            steps {
                // Build the Docker image from the cloned code
                script {
                    docker.build("${IMAGE_NAME}:${BUILD_NUMBER}", '.')
                }
            }
        }
        stage('Run Docker on Slave') {
            agent { label NODE_LABEL }
            steps {
                // Run Docker container on the slave instance
                sh "docker run ${IMAGE_NAME}:${BUILD_NUMBER} pytest -v"
            }
        }
    }
    post {
        always {
            echo "Sending Slack Notification..."
            slackSend channel: "#jenkins-cicd",
            color: COLOR_MAP[currentBuild.currentResult],
            message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
}
