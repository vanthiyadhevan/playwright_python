def COLOR_MAP = [
    'SUCCESS' : 'good',
    'FAILURE' : 'danger',
    'UNSTABLE' : 'warning',
    'ABOURTED' : 'warning'
]
pipeline {
    agent any
    environment {
        SSH_USER = 'ubuntu'
        SSH_KEY = '/home/mr-skyline/Downloads/'
        NODE_LABEL = 'jenkins-slave'
        AWS_CREDENTIALS = credentials('aws_creds')

        IMAGE_NAME = 'playwright_python'
    }
    stages {
        stage('Clone repository') {
            steps {
                git url: 'https://github.com/vanthiyadhevan/playwright_python.git', branch: 'jenkins_slave_node' 
            }
        }
        stage('Terraform Init') {
            steps {
                sh 'terraform init'
            }
        }
        stage('Terraform Validate') {
            steps {
                sh 'terraform validate'
            }
        }
        stage('Terraform Apply') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_creds']]) {
                    sh 'terraform apply -auto-approve'
                }
            }
        }
        stage('Get EC2 Instance IP') {
            steps {
                script {
                    // Get the EC2 instance public IP
                    EC2_IP = sh(script: "terraform output -raw PublicIP", returnStdout: true).trim()
                    echo "EC2 Instance IP: ${EC2_IP}"
                }
            }
        }
        stage('Configure Jenkins Slave via JCasC') {
            steps {
                script {
                    def jenkinsSlaveConfig = """
                    jenkins:
                      nodes:
                        - permanent:
                            name: "jenkins-slave"
                            description: "AWS EC2 instance configured as a Jenkins slave node"
                            remoteFS: "/home/ubuntu/jenkins"
                            numExecutors: 1
                            launcher:
                              sshLauncher:
                                host: "${EC2_IP}"
                                port: 22
                                credentialsId: "aws_creds"
                                jvmOptions: "-Xmx1024m"
                                javaPath: "/usr/bin/java"
                                launchTimeoutSeconds: 60
                                maxNumRetries: 5
                                retryWaitTime: 15
                            labelString: "jenkins-slave"
                            retentionStrategy:
                              always: {}
                    """
                    writeFile file: 'jenkins-slave-config.yaml', text: jenkinsSlaveConfig

                    // Use Jenkins credentials to securely retrieve the API token
                    withCredentials([string(credentialsId: 'jenkins_api_token', variable: 'JENKINS_TOKEN')]) {
                        
                        // Get CSRF crumb
                        def crumbData = sh(script: """
                            curl -u 'your-username:${JENKINS_TOKEN}' -s 'http://localhost:8080/crumbIssuer/api/json'
                        """, returnStdout: true).trim()

                        def crumbJson = readJSON text: crumbData
                        def crumbField = crumbJson.crumbRequestField
                        def crumb = crumbJson.crumb

                        // Apply JCasC configuration with crumb and secure token
                        sh """
                            curl -X POST -u 'your-username:${JENKINS_TOKEN}' -H "${crumbField}: ${crumb}" \
                            -F "jenkins-configuration=@jenkins-slave-config.yaml" \
                            http://localhost:8080/configuration-as-code/apply
                        """
                    }
                }
            }
        }
        stage('Build Docker Image') {
            agent { label NODE_LABEL }
            steps {
                // Build the Docker image from the cloned code
                script {
                    docker.build("${IMAGE_NAME}:${BUILD_NUMBER}", '.')
                }
            }
        }
        stage('Run Docker on Slave') {
            agent { label NODE_LABEL }
            steps {
                // Run Docker container on the slave instance
                sh "docker run ${IMAGE_NAME}:${BUILD_NUMBER} pytest -v"
            }
        }
    }
    post {
        always {
            echo "slack Notification..."
            slackSend channel: "#jenkins-cicd",
            color: COLOR_MAP[currentBuild.currentResult],
            message: "*${currentBuild.currentResult}:* job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
}
